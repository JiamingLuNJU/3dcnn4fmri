%%%%%%%%%%%%%%%%%%%%%  input settings  %%%%%%%%%%%%%%%%%%

	net.hyperParam.sizeFmInput = [53 63 46]; 	% size of input feature map
	net.hyperParam.numFmInput  = 1;        	% number of feature map of the input

%%%%%%%%%%%%%%%%%%%%%  Layers specification %%%%%%%%%%%%%%%%%%

	net.layers{end+1}.properties = struct('type',2,'numFm',8 , 'Activation',@Relu, 'dActivation',@dRelu,'kernel',[7 7 7] , 'stride',2, 'pooling', [1 1 1]);
    net.layers{end+1}.properties = struct('type',2,'numFm',16 , 'Activation',@Relu, 'dActivation',@dRelu,'kernel',[5 5 5] , 'stride',2, 'pooling', [1 1 1]);
    net.layers{end+1}.properties = struct('type',2,'numFm',32 , 'Activation',@Relu, 'dActivation',@dRelu,'kernel',[3 3 3] , 'stride',2, 'pooling', [1 1 1], 'dropOut' ,0.5);
	net.layers{end+1}.properties = struct('type',1,'numFm',128, 'Activation',@Relu, 'dActivation',@dRelu);
	net.layers{end+1}.properties = struct('type',1,'numFm',4);

%%%%%%%%%%%%%%%%%%%%%  Hyper params - training %%%%%%%%%%%%%%%%%%

	net.hyperParam.trainLoopCount = 50;		% how many images to train each interation
	net.hyperParam.testImageNum   = 100;   	% after each interation, on how many images to evaluate network performance
	net.hyperParam.ni_initial     = 0.001;		% learning rate to start training process
	net.hyperParam.ni_final       = 0.000001;	% final learning rate to stop the training process